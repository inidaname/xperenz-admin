version: "3.3"
services:
  rabbitmq:
    image: "rabbitmq:3.8.14-alpine"
    container_name: rabbitmq
    networks:
      - rabbitmq
    restart: unless-stopped

  # postgres:
  #   image: postgres:11-alpine
  #   container_name: postgres
  #   networks:
  #     - postgres
  #   volumes:
  #     - postgres:/var/lib/postgresql/data
  #     - /etc/localtime:/etc/localtime:ro
  #   environment:
  #     - POSTGRES_DB=convexity
  #     - POSTGRES_USER=postgres
  #     - POSTGRES_PASSWORD=postgres
  #   restart: unless-stopped

  backend:
    depends_on:
      # - postgres
      - rabbitmq
    container_name: backend
    build:
      context: .
      dockerfile: Dockerfile
    volumes: 
    - ./:/app
    environment:
      - PORT=8080
      - NODE_ENV=production
    ports: 
      - 8080:8080
    expose:
      - 8080
    networks:
      - gateway
      # - postgres
      - rabbitmq
    restart: unless-stopped
    command: npm run start
    # security_opt:
      # - no-new-privileges:true

  consumer:
    depends_on:
      # - postgres
      - rabbitmq
      - backend
    container_name: consumer
    build:
      context: .
      dockerfile: Dockerfile.Consumer
    volumes: 
    - ./:/app
    environment:
      - PORT=8080
      - NODE_ENV=production
    networks:
      - gateway
      # - postgres
      - rabbitmq
    restart: unless-stopped
    security_opt:
      - no-new-privileges:true
    command: npm run start:consumer

networks:
  gateway:
    driver: bridge
    # name: gateway
  rabbitmq:
    internal: true
  # postgres:
  #   internal: true

# volumes:
#   postgres:
#     external: true
